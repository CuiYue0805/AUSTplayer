%% Chamfer distance
CD=zeros(100,100);
for i=1:10000
    s1=0; s2=0;
    d=D{i};u=U{i};
    d=d(:,(1:3));u=u(:,(1:3));
    
    for j=1:size(d,1)
        dist1=zeros(size(u,1),1);
        for k=1:size(u,1)
            X=[d(j,:);u(k,:)];
            dist1(k)=pdist(X,'euclidean');
        end
        d1=min(dist1);
        s1=s1+d1;
    end    
    for m=1:size(u,1)
        dist2=zeros(size(d,1),1);
        for n=1:size(d,1)
            Y=[u(m,:);d(n,:)];
            dist2(n)=pdist(Y,'euclidean');
        end
        d2=min(dist2);
        s2=s2+d2;
    end
    CD(i)=s1./size(d,1)+s2./size(u,1);
end
%%
ptCloud = pcread('.ply');
%%
clc
clear
close all;

%% Mean curvature & Normal vectors
[fileName,pathName]=uigetfile({'*.pcd';'*.txt'},'Input Data-File'); 

if isempty(fileName) || length(fileName) == 1
    fprintf("Point cloud file not selectedÔºÅ\n");
    return;
end
pc = pcread([pathName,fileName]);
Data = pc.Location;       
% color = pc.Color;

x=Data(:,1);
y=Data(:,2);
z=Data(:,3);

K=num; 
cur = zeros(length(x),1); 
kdtree = KDTreeSearcher(Data);
[nearestPoints,dists] = knnsearch(kdtree,Data,'K',K);      
normals = pcnormals(pc,K);     

for i = 1:length(x)           
    nearIndex = nearestPoints(i,2:end);
    nearPoint=Data(nearIndex,:);
    currentPoint = Data(i,:);
    vec = nearPoint - currentPoint;  
    pN = normals(i,:);
    qN = normals(nearIndex,:);
    dist = sqrt(sum(vec.^2,2));        
    repNor = repmat(pN,size(vec,1),1);  
    alpha = sqrt(abs(acos(dot(repNor,vec,2)./(dist))).^2);     
    beta = sqrt(abs(acos(dot(repNor,qN,2))).^2);
    kn = -sin(beta)./(dist.*sin(alpha));
    
    psi = atan(pN(2)/pN(1));
    localX = [-sin(psi),cos(psi),0];
    phi = acos(pN(3));
    localY = [cos(phi)*cos(psi),cos(phi)*sin(psi),-sin(phi)];
    
    e = [localX',localY',pN'];
    newPoint = vec * e;
    projPoint = newPoint(:,1:2);    
    tmp = zeros(size(projPoint,1),1);
    projPoint = [projPoint,tmp];
    repX = repmat(localX,size(projPoint,1),1);
    distNear = sqrt(sum(projPoint.^2,2));
    thetaI = sqrt(abs(acos(dot(repX,projPoint,2)./(distNear))).^2);
    
    tmpCos = cos(thetaI).^2;
    tmpCosSin = 2*cos(thetaI).*sin(thetaI);
    tmpSin = sin(thetaI).^2;
    M = [tmpCos,tmpCosSin,tmpSin];
    
    A = M'*M;
    mu = A\M'*kn;
    W = [mu(1),mu(2);mu(2),mu(3)];
    k = eig(W);
    cur(i) = (k(1)+k(2))./2;
end
%% Initial aperture
ICP registration point clouds of upper and lower joint.
